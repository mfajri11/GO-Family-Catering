// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\ff\Documents\coding\golang\family-catering\internal\repository\auth.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	model "family-catering/internal/model"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthRepository is a mock of AuthRepository interface.
type MockAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepositoryMockRecorder
}

// MockAuthRepositoryMockRecorder is the mock recorder for MockAuthRepository.
type MockAuthRepositoryMockRecorder struct {
	mock *MockAuthRepository
}

// NewMockAuthRepository creates a new mock instance.
func NewMockAuthRepository(ctrl *gomock.Controller) *MockAuthRepository {
	mock := &MockAuthRepository{ctrl: ctrl}
	mock.recorder = &MockAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepository) EXPECT() *MockAuthRepositoryMockRecorder {
	return m.recorder
}

// AccessTokenTTL mocks base method.
func (m *MockAuthRepository) AccessTokenTTL() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessTokenTTL")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// AccessTokenTTL indicates an expected call of AccessTokenTTL.
func (mr *MockAuthRepositoryMockRecorder) AccessTokenTTL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessTokenTTL", reflect.TypeOf((*MockAuthRepository)(nil).AccessTokenTTL))
}

// DeleteSession mocks base method.
func (m *MockAuthRepository) DeleteSession(ctx context.Context, sid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", ctx, sid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockAuthRepositoryMockRecorder) DeleteSession(ctx, sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockAuthRepository)(nil).DeleteSession), ctx, sid)
}

// GetSessionIDByEmail mocks base method.
func (m *MockAuthRepository) GetSessionIDByEmail(ctx context.Context, email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionIDByEmail", ctx, email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionIDByEmail indicates an expected call of GetSessionIDByEmail.
func (mr *MockAuthRepositoryMockRecorder) GetSessionIDByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionIDByEmail", reflect.TypeOf((*MockAuthRepository)(nil).GetSessionIDByEmail), ctx, email)
}

// Login mocks base method.
func (m *MockAuthRepository) Login(ctx context.Context, authLogin model.Auth) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, authLogin)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockAuthRepositoryMockRecorder) Login(ctx, authLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthRepository)(nil).Login), ctx, authLogin)
}

// RefreshTokenTTL mocks base method.
func (m *MockAuthRepository) RefreshTokenTTL() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokenTTL")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// RefreshTokenTTL indicates an expected call of RefreshTokenTTL.
func (mr *MockAuthRepositoryMockRecorder) RefreshTokenTTL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokenTTL", reflect.TypeOf((*MockAuthRepository)(nil).RefreshTokenTTL))
}

// Session mocks base method.
func (m *MockAuthRepository) Session(ctx context.Context, sid string) (*model.Auth, error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session", ctx, sid)
	ret0, _ := ret[0].(*model.Auth)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Session indicates an expected call of Session.
func (mr *MockAuthRepositoryMockRecorder) Session(ctx, sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockAuthRepository)(nil).Session), ctx, sid)
}
