// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\ff\Documents\coding\golang\family-catering\internal\repository\order.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	model "family-catering/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// CancelUnpaidOrder mocks base method.
func (m *MockOrderRepository) CancelUnpaidOrder(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelUnpaidOrder", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelUnpaidOrder indicates an expected call of CancelUnpaidOrder.
func (mr *MockOrderRepositoryMockRecorder) CancelUnpaidOrder(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelUnpaidOrder", reflect.TypeOf((*MockOrderRepository)(nil).CancelUnpaidOrder), ctx)
}

// ConfirmPayment mocks base method.
func (m *MockOrderRepository) ConfirmPayment(ctx context.Context, email string) (int64, error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmPayment", ctx, email)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ConfirmPayment indicates an expected call of ConfirmPayment.
func (mr *MockOrderRepositoryMockRecorder) ConfirmPayment(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmPayment", reflect.TypeOf((*MockOrderRepository)(nil).ConfirmPayment), ctx, email)
}

// Create mocks base method.
func (m *MockOrderRepository) Create(ctx context.Context, orders []*model.Order) (int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, orders)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockOrderRepositoryMockRecorder) Create(ctx, orders interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderRepository)(nil).Create), ctx, orders)
}

// Search mocks base method.
func (m *MockOrderRepository) Search(ctx context.Context, order model.OrderQuery) ([]*model.Order, error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, order)
	ret0, _ := ret[0].([]*model.Order)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Search indicates an expected call of Search.
func (mr *MockOrderRepositoryMockRecorder) Search(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockOrderRepository)(nil).Search), ctx, order)
}
