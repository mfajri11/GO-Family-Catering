// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\ff\Documents\coding\golang\family-catering\internal\repository\owner.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	model "family-catering/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOwnerRepository is a mock of OwnerRepository interface.
type MockOwnerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOwnerRepositoryMockRecorder
}

// MockOwnerRepositoryMockRecorder is the mock recorder for MockOwnerRepository.
type MockOwnerRepositoryMockRecorder struct {
	mock *MockOwnerRepository
}

// NewMockOwnerRepository creates a new mock instance.
func NewMockOwnerRepository(ctrl *gomock.Controller) *MockOwnerRepository {
	mock := &MockOwnerRepository{ctrl: ctrl}
	mock.recorder = &MockOwnerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOwnerRepository) EXPECT() *MockOwnerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOwnerRepository) Create(ctx context.Context, owner model.Owner) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, owner)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOwnerRepositoryMockRecorder) Create(ctx, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOwnerRepository)(nil).Create), ctx, owner)
}

// Delete mocks base method.
func (m *MockOwnerRepository) Delete(ctx context.Context, id int64) (int64, error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Delete indicates an expected call of Delete.
func (mr *MockOwnerRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOwnerRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockOwnerRepository) Get(ctx context.Context, id int64) (*model.Owner, error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Owner)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockOwnerRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOwnerRepository)(nil).Get), ctx, id)
}

// GetByEmail mocks base method.
func (m *MockOwnerRepository) GetByEmail(ctx context.Context, email string) (*model.Owner, error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(*model.Owner)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockOwnerRepositoryMockRecorder) GetByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockOwnerRepository)(nil).GetByEmail), ctx, email)
}

// List mocks base method.
func (m *MockOwnerRepository) List(ctx context.Context, limit, offset int) ([]*model.Owner, error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset)
	ret0, _ := ret[0].([]*model.Owner)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockOwnerRepositoryMockRecorder) List(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOwnerRepository)(nil).List), ctx, limit, offset)
}

// Update mocks base method.
func (m *MockOwnerRepository) Update(ctx context.Context, owner model.Owner) (int64, error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, owner)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockOwnerRepositoryMockRecorder) Update(ctx, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOwnerRepository)(nil).Update), ctx, owner)
}

// UpdateEmailByID mocks base method.
func (m *MockOwnerRepository) UpdateEmailByID(ctx context.Context, id int64, email string) (int64, error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmailByID", ctx, id, email)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateEmailByID indicates an expected call of UpdateEmailByID.
func (mr *MockOwnerRepositoryMockRecorder) UpdateEmailByID(ctx, id, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmailByID", reflect.TypeOf((*MockOwnerRepository)(nil).UpdateEmailByID), ctx, id, email)
}

// UpdatePasswordByEmail mocks base method.
func (m *MockOwnerRepository) UpdatePasswordByEmail(ctx context.Context, email, password string) (int64, error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePasswordByEmail", ctx, email, password)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdatePasswordByEmail indicates an expected call of UpdatePasswordByEmail.
func (mr *MockOwnerRepositoryMockRecorder) UpdatePasswordByEmail(ctx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePasswordByEmail", reflect.TypeOf((*MockOwnerRepository)(nil).UpdatePasswordByEmail), ctx, email, password)
}

// UpdatePasswordByID mocks base method.
func (m *MockOwnerRepository) UpdatePasswordByID(ctx context.Context, id int64, password string) (int64, error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePasswordByID", ctx, id, password)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdatePasswordByID indicates an expected call of UpdatePasswordByID.
func (mr *MockOwnerRepositoryMockRecorder) UpdatePasswordByID(ctx, id, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePasswordByID", reflect.TypeOf((*MockOwnerRepository)(nil).UpdatePasswordByID), ctx, id, password)
}
