// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\ff\Documents\coding\golang\family-catering\internal\service\auth.go

// Package service is a generated GoMock package.
package service

import (
	model "family-catering/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// ForgotPassword mocks base method.
func (m *MockAuthService) ForgotPassword(ctx context.Context, req model.AuthForgotPasswordRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgotPassword", ctx, req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForgotPassword indicates an expected call of ForgotPassword.
func (mr *MockAuthServiceMockRecorder) ForgotPassword(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPassword", reflect.TypeOf((*MockAuthService)(nil).ForgotPassword), ctx, req)
}

// Login mocks base method.
func (m *MockAuthService) Login(ctx context.Context, req model.AuthLoginRequest) (*model.AuthLoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, req)
	ret0, _ := ret[0].(*model.AuthLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceMockRecorder) Login(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthService)(nil).Login), ctx, req)
}

// Logout mocks base method.
func (m *MockAuthService) Logout(ctx context.Context, req model.AuthLogoutRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthServiceMockRecorder) Logout(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthService)(nil).Logout), ctx, req)
}

// RenewAccessToken mocks base method.
func (m *MockAuthService) RenewAccessToken(ctx context.Context) (*model.AuthRenewAccessTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewAccessToken", ctx)
	ret0, _ := ret[0].(*model.AuthRenewAccessTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenewAccessToken indicates an expected call of RenewAccessToken.
func (mr *MockAuthServiceMockRecorder) RenewAccessToken(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewAccessToken", reflect.TypeOf((*MockAuthService)(nil).RenewAccessToken), ctx)
}

// Session mocks base method.
func (m *MockAuthService) Session(ctx context.Context, sid string) (*model.AuthSessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session", ctx, sid)
	ret0, _ := ret[0].(*model.AuthSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Session indicates an expected call of Session.
func (mr *MockAuthServiceMockRecorder) Session(ctx, sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockAuthService)(nil).Session), ctx, sid)
}
