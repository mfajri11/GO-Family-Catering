// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\ff\Documents\coding\golang\family-catering\internal\service\mailer.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMailer is a mock of Mailer interface.
type MockMailer struct {
	ctrl     *gomock.Controller
	recorder *MockMailerMockRecorder
}

// MockMailerMockRecorder is the mock recorder for MockMailer.
type MockMailerMockRecorder struct {
	mock *MockMailer
}

// NewMockMailer creates a new mock instance.
func NewMockMailer(ctrl *gomock.Controller) *MockMailer {
	mock := &MockMailer{ctrl: ctrl}
	mock.recorder = &MockMailerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailer) EXPECT() *MockMailerMockRecorder {
	return m.recorder
}

// SendEMailForgotPassword mocks base method.
func (m *MockMailer) SendEMailForgotPassword(to []string, cc, subject, name, authlink string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEMailForgotPassword", to, cc, subject, name, authlink)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEMailForgotPassword indicates an expected call of SendEMailForgotPassword.
func (mr *MockMailerMockRecorder) SendEMailForgotPassword(to, cc, subject, name, authlink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEMailForgotPassword", reflect.TypeOf((*MockMailer)(nil).SendEMailForgotPassword), to, cc, subject, name, authlink)
}

// SendEmailNotifyLogin mocks base method.
func (m *MockMailer) SendEmailNotifyLogin(to []string, cc, subject, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmailNotifyLogin", to, cc, subject, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmailNotifyLogin indicates an expected call of SendEmailNotifyLogin.
func (mr *MockMailerMockRecorder) SendEmailNotifyLogin(to, cc, subject, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmailNotifyLogin", reflect.TypeOf((*MockMailer)(nil).SendEmailNotifyLogin), to, cc, subject, name)
}
