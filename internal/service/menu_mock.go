// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\ff\Documents\coding\golang\family-catering\internal\service\menu.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	model "family-catering/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMenuService is a mock of MenuService interface.
type MockMenuService struct {
	ctrl     *gomock.Controller
	recorder *MockMenuServiceMockRecorder
}

// MockMenuServiceMockRecorder is the mock recorder for MockMenuService.
type MockMenuServiceMockRecorder struct {
	mock *MockMenuService
}

// NewMockMenuService creates a new mock instance.
func NewMockMenuService(ctrl *gomock.Controller) *MockMenuService {
	mock := &MockMenuService{ctrl: ctrl}
	mock.recorder = &MockMenuServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMenuService) EXPECT() *MockMenuServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMenuService) Create(ctx context.Context, req model.CreateMenuRequest) (*model.CreateMenuResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req)
	ret0, _ := ret[0].(*model.CreateMenuResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMenuServiceMockRecorder) Create(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMenuService)(nil).Create), ctx, req)
}

// Delete mocks base method.
func (m *MockMenuService) Delete(ctx context.Context, id int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockMenuServiceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMenuService)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockMenuService) GetByID(ctx context.Context, id int64) (*model.GetMenuResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.GetMenuResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMenuServiceMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMenuService)(nil).GetByID), ctx, id)
}

// GetByName mocks base method.
func (m *MockMenuService) GetByName(ctx context.Context, name string) (*model.GetMenuResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(*model.GetMenuResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockMenuServiceMockRecorder) GetByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockMenuService)(nil).GetByName), ctx, name)
}

// List mocks base method.
func (m *MockMenuService) List(ctx context.Context, limit, offset int) ([]*model.GetMenuResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset)
	ret0, _ := ret[0].([]*model.GetMenuResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockMenuServiceMockRecorder) List(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMenuService)(nil).List), ctx, limit, offset)
}

// Update mocks base method.
func (m *MockMenuService) Update(ctx context.Context, id int64, req model.UpdateMenuRequest) (*model.UpdateMenuResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, req)
	ret0, _ := ret[0].(*model.UpdateMenuResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMenuServiceMockRecorder) Update(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMenuService)(nil).Update), ctx, id, req)
}
