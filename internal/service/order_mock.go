// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\ff\Documents\coding\golang\family-catering\internal\service\order.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	model "family-catering/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderService is a mock of OrderService interface.
type MockOrderService struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceMockRecorder
}

// MockOrderServiceMockRecorder is the mock recorder for MockOrderService.
type MockOrderServiceMockRecorder struct {
	mock *MockOrderService
}

// NewMockOrderService creates a new mock instance.
func NewMockOrderService(ctrl *gomock.Controller) *MockOrderService {
	mock := &MockOrderService{ctrl: ctrl}
	mock.recorder = &MockOrderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderService) EXPECT() *MockOrderServiceMockRecorder {
	return m.recorder
}

// CancelUnpaidOrder mocks base method.
func (m *MockOrderService) CancelUnpaidOrder(ctx context.Context) (*model.CancelUnpaidOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelUnpaidOrder", ctx)
	ret0, _ := ret[0].(*model.CancelUnpaidOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelUnpaidOrder indicates an expected call of CancelUnpaidOrder.
func (mr *MockOrderServiceMockRecorder) CancelUnpaidOrder(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelUnpaidOrder", reflect.TypeOf((*MockOrderService)(nil).CancelUnpaidOrder), ctx)
}

// ConfirmPayment mocks base method.
func (m *MockOrderService) ConfirmPayment(ctx context.Context, req model.ConfirmPaymentRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmPayment", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmPayment indicates an expected call of ConfirmPayment.
func (mr *MockOrderServiceMockRecorder) ConfirmPayment(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmPayment", reflect.TypeOf((*MockOrderService)(nil).ConfirmPayment), ctx, req)
}

// Create mocks base method.
func (m *MockOrderService) Create(ctx context.Context, req model.CreateOrderRequest) (*model.CreateOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req)
	ret0, _ := ret[0].(*model.CreateOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOrderServiceMockRecorder) Create(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderService)(nil).Create), ctx, req)
}

// Search mocks base method.
func (m *MockOrderService) Search(ctx context.Context, req model.OrderQuery) (*model.SearchOrdersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, req)
	ret0, _ := ret[0].(*model.SearchOrdersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockOrderServiceMockRecorder) Search(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockOrderService)(nil).Search), ctx, req)
}
