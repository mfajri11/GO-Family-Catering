// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\ff\Documents\coding\golang\family-catering\internal\service\owner.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	model "family-catering/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOwnerService is a mock of OwnerService interface.
type MockOwnerService struct {
	ctrl     *gomock.Controller
	recorder *MockOwnerServiceMockRecorder
}

// MockOwnerServiceMockRecorder is the mock recorder for MockOwnerService.
type MockOwnerServiceMockRecorder struct {
	mock *MockOwnerService
}

// NewMockOwnerService creates a new mock instance.
func NewMockOwnerService(ctrl *gomock.Controller) *MockOwnerService {
	mock := &MockOwnerService{ctrl: ctrl}
	mock.recorder = &MockOwnerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOwnerService) EXPECT() *MockOwnerServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOwnerService) Create(ctx context.Context, req model.CreateOwnerRequest) (*model.CreateOwnerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req)
	ret0, _ := ret[0].(*model.CreateOwnerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOwnerServiceMockRecorder) Create(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOwnerService)(nil).Create), ctx, req)
}

// Delete mocks base method.
func (m *MockOwnerService) Delete(ctx context.Context, id int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockOwnerServiceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOwnerService)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockOwnerService) Get(ctx context.Context, id int64) (*model.GetOwnerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.GetOwnerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOwnerServiceMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOwnerService)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockOwnerService) List(ctx context.Context, limit, offset int) ([]*model.GetOwnerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset)
	ret0, _ := ret[0].([]*model.GetOwnerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockOwnerServiceMockRecorder) List(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOwnerService)(nil).List), ctx, limit, offset)
}

// ResetPasswordByEmail mocks base method.
func (m *MockOwnerService) ResetPasswordByEmail(ctx context.Context, passwordResetID string, req model.ResetPasswordRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPasswordByEmail", ctx, passwordResetID, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPasswordByEmail indicates an expected call of ResetPasswordByEmail.
func (mr *MockOwnerServiceMockRecorder) ResetPasswordByEmail(ctx, passwordResetID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPasswordByEmail", reflect.TypeOf((*MockOwnerService)(nil).ResetPasswordByEmail), ctx, passwordResetID, req)
}

// ResetPasswordByID mocks base method.
func (m *MockOwnerService) ResetPasswordByID(ctx context.Context, id int64, req model.ResetPasswordRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPasswordByID", ctx, id, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPasswordByID indicates an expected call of ResetPasswordByID.
func (mr *MockOwnerServiceMockRecorder) ResetPasswordByID(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPasswordByID", reflect.TypeOf((*MockOwnerService)(nil).ResetPasswordByID), ctx, id, req)
}

// Update mocks base method.
func (m *MockOwnerService) Update(ctx context.Context, id int64, req model.UpdateOwnerRequest) (*model.UpdateOwnerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, req)
	ret0, _ := ret[0].(*model.UpdateOwnerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockOwnerServiceMockRecorder) Update(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOwnerService)(nil).Update), ctx, id, req)
}

// UpdateEmailByID mocks base method.
func (m *MockOwnerService) UpdateEmailByID(ctx context.Context, id int64, req model.UpdateEmailRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmailByID", ctx, id, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmailByID indicates an expected call of UpdateEmailByID.
func (mr *MockOwnerServiceMockRecorder) UpdateEmailByID(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmailByID", reflect.TypeOf((*MockOwnerService)(nil).UpdateEmailByID), ctx, id, req)
}
